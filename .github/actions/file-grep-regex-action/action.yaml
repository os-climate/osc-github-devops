---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2024 The Linux Foundation

name: "Extract string from file using GREP"
description: "Uses grep and a regular expression to extract text from files"

inputs:
  # Mandatory
  FLAGS:
    description: "Flags to use with grep command"
    required: false
    default: "-E"
  REGEX:
    description: "Regular expression used to extract string"
    required: true
  FILENAME:
    description: "File containing text to extract"
    required: true
  # Optional
  NO_FAIL:
    description: "Override errors if file not found or no value returned"
    required: false
    default: "false"

outputs:
  EXTRACTED_STRING:
    description: "The string extracted by the regular expression"
    value: ${{ steps.grep.outputs.extracted_string }}

runs:
  using: "composite"
  steps:
    - name: "Extract text/string from file"
      id: grep
      shell: bash
      run: |
        # Extract text/string from file

        set -o pipefail

        set -o noglob
        FLAGS="${{ inputs.FLAGS }}"
        REGEX='${{ inputs.REGEX }}'
        FILENAME="${{ inputs.FILENAME }}"
        set +o noglob

        if [ ! -f "$FILENAME" ]; then
          echo "Error: file not found [$FILENAME]"
          if [ "${{ inputs.NO_FAIL }}" = "true" ]; then
            exit 0
          else
            exit 1
          fi
        fi

        set -o noglob
        echo "Flags to grep command: $FLAGS"
        echo "Regular expression to use: $REGEX"
        echo "File to search: $FILENAME"
        # Extract the string using grep and regex
        STRING=$(grep $FLAGS '${{ inputs.REGEX }}' $FILENAME)
        set +o noglob

        if [ -z "$STRING" ]; then
          echo "String extraction failed; no matching value found ❌"
          if [ "${{ inputs.NO_FAIL }}" = "true" ]; then
            exit 0
          else
            exit 1
          fi
        else
          # Make multi-line string available as action output
          { echo 'extracted_string<<EOF'
            echo "$STRING"
            echo EOF
          } >> "$GITHUB_ENV"
          { echo 'extracted_string<<EOF'
            echo "$STRING"
            echo EOF
          } >> "$GITHUB_OUTPUT"
          echo "Extracted string ✅"
          echo "$STRING"
        fi
