---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2025 The Linux Foundation

# python-project-version-action
name: "üêç Python Project Current Version"
description: "Returns the current version of a Python Project"
# Supports both pyproject.toml and setup.py project descriptions

outputs:
  PYTHON_PROJECT_VERSION:
    description: "The current version declared for a Python project"
    value: ${{ steps.publish.outputs.python_project_version }}
  SOURCE:
    description: "File used to source project metadata [ pyproject.toml|setup.py ]"
    value: ${{ steps.publish.outputs.python_project_version }}

runs:
  using: "composite"
  steps:
    # yamllint disable-line rule:line-length
    - uses: lfit/releng-reusable-workflows/.github/actions/path-check-action@1d327501514102db5018642036a974e79415ec5a #¬†v0.2.8
      id: setup-py
      with:
        path: "setup-py"

    - name: "Use project version from setup.py"
      id: setup-py-version
      if: steps.setup-py.outputs.type == 'file'
      # yamllint disable-line rule:line-length
      uses: lfit/releng-reusable-workflows/.github/actions/file-grep-regex-action@1d327501514102db5018642036a974e79415ec5a #¬†v0.2.8
      with:
        flags: "-oP -m1"
        # https://regex101.com/r/QKYHId/1
        regex: '(?<=version=")([^"]*)'
        filename: "setup.py"

    # yamllint disable-line rule:line-length
    - uses: lfit/releng-reusable-workflows/.github/actions/path-check-action@1d327501514102db5018642036a974e79415ec5a #¬†v0.2.8
      id: pyproject-toml
      with:
        path: "pyproject.toml"

    - name: "Use project version from pyproject.toml"
      id: pyproject-toml-version
      if: steps.pyproject-toml.outputs.type == 'file'
      # yamllint disable-line rule:line-length
      uses: lfit/releng-reusable-workflows/.github/actions/file-grep-regex-action@1d327501514102db5018642036a974e79415ec5a #¬†v0.2.8
      with:
        flags: "-oP -m1"
        # https://regex101.com/r/MWmRge/1
        regex: '(?<=^version = ")([^"]*)'
        filename: "pyproject.toml"

    - name: "Error: Python project metadata NOT found"
      if: steps.pyproject-toml.outputs.type == 'invalid' &&
        steps.setup-py.outputs.type == 'invalid'
      shell: bash
      run: |
        # Error: Python project metadata NOT found
        echo "Error: neither pyproject.toml nor setup.py were found ‚ùå"
        exit 1

    - name: "Return extracted values"
      id: publish
      shell: bash
      run: |
        # Return extracted values

        # pyproject.toml is preferred source if both files exist
        if [ ${{ steps.pyproject-toml.outputs.type == 'file' }} ]; then
          echo "Using project version from source: pyproject.toml ‚úÖ"
          echo "source=pyproject.toml" >> "$GITHUB_ENV"
          echo "source=pyproject.toml" >> "$GITHUB_OUTPUT"
          PYTHON_PROJECT_VERSION="${{ steps.pyproject-toml-version.outputs.extracted_string}}"

        elif [ ${{ steps.setup-py.outputs.type == 'file' }} ]; then
          echo "Using project version from source: setup.py ‚ö†Ô∏è"
          echo "Warning: consider migrating to modern PEP standards"
          echo "source=setup.py" >> "$GITHUB_ENV"
          echo "source=setup.py" >> "$GITHUB_OUTPUT"
          PYTHON_PROJECT_VERSION="${{ steps.setup-py-version.outputs.extracted_string}}"
        fi

        # Validate and output captured value
        if [ -z "$PYTHON_PROJECT_VERSION" ]; then
          echo "The project name extraction failed ‚ùå"; exit 1
        fi
        echo "python_project_version: $PYTHON_PROJECT_VERSION ‚úÖ"
        echo "python_project_version=$PYTHON_PROJECT_VERSION" >> "$GITHUB_ENV"
        echo "python_project_version=$PYTHON_PROJECT_VERSION" >> "$GITHUB_OUTPUT"
