---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2024 The Linux Foundation

# python-project-version-vs-tag-action
name: "🐍 Check project version matches {{ github.ref_name }}"
description: "Checks Python project version matches {{ github.ref_name }}"

inputs:
  FAIL_ON_MISMATCH:
    description: "When set true will exit with error on version mismatch"
    required: false
    default: "true"

outputs:
  MATCH:
    description: "Set true when pushed tags match Python project metadata"
    value: ${{ steps.verify.outputs.match }}

runs:
  using: "composite"
  steps:
    - name: "Retrieve project version"
      id: fetch
      uses: os-climate/osc-github-devops/.github/actions/python-project-version-action@main

    - name: "Check tag/versions for consistency"
      id: verify
      shell: bash
      run: |
        # Check tag/versions for consistency

        PROJECT_VERSION="${{ steps.fetch.outputs.python_project_version }}"
        if [ -z "$PROJECT_VERSION" ]; then
          echo "The python project version string was empty ❌"
          echo "Check action/workflow inputs and variables"
          echo "Verify parsing of python project metadata?"
          exit 1
        fi

        # Get version from pushed tag
        TAG_VERSION="${{ github.ref_name }}"
        echo "Version from project metadata: $PROJECT_VERSION"
        echo "Version from tag push: $TAG_VERSION"

        # Compare the two version strings
        if [ "$TAG_VERSION" = "$PROJECT_VERSION" ]; then
          echo "Pushed tag matches version in Python project ✅"
          echo "match=true" >> "$GITHUB_ENV"
          echo "match=true" >> "$GITHUB_OUTPUT"
        else
          echo "Error: Pushed tag does NOT match version in Python project ❌"
          echo "match=false" >> "$GITHUB_ENV"
          echo "match=false" >> "$GITHUB_OUTPUT"
          if [ "f$FAIL_ON_MISMATCH" = "ftrue" ]; then
            exit 1
          fi
        fi
