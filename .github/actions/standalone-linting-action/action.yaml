---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2024 The Linux Foundation

# standalone-standalone-linting-action
name: "Linting action"
description: "Runs linting tools that do NOT work under pre-commit.ci"

inputs:
  CONFIG_URL:
    description: "Download location for standalone linting configuration file"
    type: string
    required: false
    # yamllint disable-line rule:line-length
    default: "https://raw.githubusercontent.com/os-climate/osc-github-devops/refs/heads/main/.github/actions/standalone-linting-action/pre-commit-config.yaml"
  DEPENDENCIES_URL:
    description: "Download location for Python dependencies"
    type: string
    required: false
    # yamllint disable-line rule:line-length
    default: "https://raw.githubusercontent.com/os-climate/osc-github-devops/refs/heads/main/.github/actions/standalone-linting-action/requirements.txt"

runs:
  using: "composite"
  steps:
    - name: "Setup Python"
      # yamllint disable-line rule:line-length
      uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b # v5.3.0
      with:
        python-version: "3.12"

    - name: "Checkout repository"
      # yamllint disable-line rule:line-length
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

    - name: "Check prerequisites"
      shell: bash
      run: |
        # Check prerequisites
        CURL_CMD=$(which curl)
        if [ ! -x "$CURL_CMD" ]; then echo "curl binary not found"; exit 1; fi

    - name: "Download Python dependencies file"
      shell: bash
      run: |
        # Download Python dependencies file
        echo "Downloading configuration from: ${{ inputs.DEPENDENCIES_URL }}"
        curl -sS -o requirements.txt "${{ inputs.DEPENDENCIES_URL }}"
        echo "Python dependencies file downloaded ✅"
        cat requirements.txt

    - name: "Install Python dependencies"
      shell: bash
      run: |
        # Install Python dependencies
        pip install --disable-pip-version-check --upgrade -r requirements.txt

    - name: "Download pre-commit configuration file"
      shell: bash
      run: |
        # Download pre-commit configuration file
        echo "Downloading configuration from: ${{ inputs.CONFIG_URL }}"
        curl -sS -o .pre-commit-config.yaml "${{ inputs.CONFIG_URL }}"
        echo "Pre-commit configuration file downloaded ✅"
        cat .pre-commit-config.yaml

    - name: "Validate configuration"
      shell: bash
      run: |
        # Validate configuration
        pre-commit validate-config

    - name: "Run all pre-commit hooks"
      shell: bash
      run: |
        # Run all pre-commit hooks
        if [ ! -d .mypy_cache ]; then /bin/mkdir .mypy_cache; fi
        pre-commit run -a

      # Provided below as an example, in case needed in future

      # yamllint disable rule:line-length
      # yamllint disable rule:comments-indentation
      # yamllint disable rule:comments

      # - name: "Install dependencies"
      #   run: |
      #     SOURCE=".pre-commit-config.yaml"
      #     echo "Install Python dependencies from: $SOURCE"
      #     echo "With: pip install $PKGS"
      #     PKGS=$(yq '.repos[] | select (.repo == "https://github.com/pre-commit/mirrors-mypy")' .pre-commit-config.yaml | \
      #       grep additional_dependencies | \
      #       awk -F: '{print $2}' | \
      #       sed "s/\[//g" | \
      #       sed "s/\]//g" | \
      #       sed "s/,//g" | \
      #       sed 's/"//g')
      #       pip install $PKGS
