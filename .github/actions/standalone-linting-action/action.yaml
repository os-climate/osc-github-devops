---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2024 The Linux Foundation

# standalone-linting-action
name: "Standalone linting action"
description: "Runs linting tools that do NOT run under pre-commit.ci"

inputs:
  CONFIG_URL:
    description: "Download location for standalone linting configuration file"
    type: string
    required: false
    # yamllint disable-line rule:line-length
    default: "https://raw.githubusercontent.com/lfit/releng-reusable-workflows/refs/heads/main/.github/actions/standalone-linting-action/pre-commit-config.yaml"
  DEPENDENCIES_URL:
    description: "Download location for Python dependencies"
    type: string
    required: false
    # yamllint disable-line rule:line-length
    default: "https://raw.githubusercontent.com/lfit/releng-reusable-workflows/refs/heads/main/.github/actions/standalone-linting-action/requirements.txt"
  FORCE_REMOTE:
    description: "Ignore any local configuration; install remote linting configuration"
    type: string
    required: false
    default: "false"

runs:
  using: "composite"
  steps:
    - name: "Setup Python"
      # yamllint disable-line rule:line-length
      uses: actions/setup-python@42375524e23c412d93fb67b49958b491fce71c38 # v5.4.0
      with:
        python-version: "3.12"

    - name: "Checkout repository"
      # yamllint disable-line rule:line-length
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

    - name: "Check prerequisites"
      shell: bash
      run: |
        # Check prerequisites
        CURL_CMD=$(which curl)
        if [ ! -x "$CURL_CMD" ]; then
         echo "cURL binary not found ❌"; exit 1
        fi

    - name: "Check for local linting configuration"
      id: local-precommit-config
      # yamllint disable-line rule:line-length
      uses: lfit/releng-reusable-workflows/.github/actions/path-check-action@473a3c654d58fa0c27f91a9cc25bd9433de43d5e # v0.2.4
      with:
        path: ".pre-commit-config.yaml"

    - name: "Download pre-commit configuration file"
      # yamllint disable-line rule:line-length
      if: steps.local-precommit-config.outputs != 'file' || inputs.force_remote == 'true'
      shell: bash
      run: |
        # Download pre-commit configuration file
        if [ -f .pre-commit-config.yaml ]; then
          mv .pre-commit-config.yaml .pre-commit-config.yaml.local
        fi
        echo "Downloading configuration from: ${{ inputs.CONFIG_URL }}"
        curl -sS -o .pre-commit-config.yaml "${{ inputs.CONFIG_URL }}"
        echo "Pre-commit configuration file downloaded ✅"
        cat .pre-commit-config.yaml

    - name: "Download/install Python dependencies file"
      # yamllint disable-line rule:line-length
      if: steps.local-precommit-config.outputs != 'file' || inputs.force_remote == 'true'
      shell: bash
      run: |
        # Download Python dependencies file
        echo "Downloading configuration from: ${{ inputs.DEPENDENCIES_URL }}"
        curl -sS -o requirements.txt "${{ inputs.DEPENDENCIES_URL }}"
        echo "Python dependencies file downloaded ✅"
        cat requirements.txt
        pip install --disable-pip-version-check --upgrade -r requirements.txt

    - name: "Validate configuration"
      shell: bash
      run: |
        # Validate configuration
        pre-commit validate-config

    - name: "Run all pre-commit hooks"
      shell: bash
      run: |
        # Run all pre-commit hooks
        if [ ! -d .mypy_cache ]; then /bin/mkdir .mypy_cache; fi
        pre-commit run -a
