---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2024 The Linux Foundation

# python-project-setup-action
name: "🛠️ Python Project Setup"
description: "Extracts Python project metadata from repository"

outputs:
  # Enumerated values
  PYTHON_PROJECT_NAME:
    description: "The name of the Python project from pyproject.toml or setup.py"
    value: ${{ steps.project-naming.outputs.python_project_name }}
  PYTHON_BUILD_NAME:
    # Any dashes in the name will be replaced with underscores
    description: "The name of the Python project when built"
    value: ${{ steps.project-naming.outputs.python_build_name }}
  VERSIONING_TYPE:
    description: "Project supported Python versions as JSON"
    value: ${{ steps.versioning-type.outputs.versioning_type }}
  MATRIX_JSON:
    description: "Project supported Python versions as JSON"
    value: ${{ steps.supported-python-versions.outputs.matrix_json }}
  BUILD_PYTHON_VERSION:
    description: "Python version to use for build (creates artefacts)"
    value: "${{ steps.supported-python-versions.outputs.base_python }}"
  METADATA_FILE:
    description: "File user to enumerate project metadata"
    value: "${{ steps.metadata-file.outputs.metadata_file }}"

runs:
  using: "composite"
  steps:
    # yamllint disable-line rule:line-length
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

    - name: "Check for pyproject.toml"
      id: project-toml
      uses: os-climate/osc-github-devops/.github/actions/path-check-action@main
      with:
        path: "pyproject.toml"

    - name: "Check for setup.py"
      id: setup-py
      uses: os-climate/osc-github-devops/.github/actions/path-check-action@main
      with:
        path: "setup.py"

    - name: "Set preferred metadata file"
      id: metadata-file
      shell: bash
      run: |
        # Set preferred metadata file
        if [ "${{ steps.project-toml.outputs.type }}" = "file" ]; then

          # Project supports modern PEP standards
          echo "Using pyproject.toml for project metadata ✅"
          echo "metadata_file=pyproject.toml" >> "$GITHUB_ENV"
          echo "metadata_file=pyproject.toml" >> "$GITHUB_OUTPUTS"

        elif [ "${{ steps.setup-py.outputs.type }}" = "file" ]; then

          # Project is defined using legacy standards
          echo "Using setup.py for project metadata ⚠️"
          echo "This project format is deprecated"
          echo "The repository content needs updating"

          echo "# Using setup.py for project metadata ⚠️" >> "$GITHUB_STEP_SUMMARY"
          echo "This project format is deprecated" >> "$GITHUB_STEP_SUMMARY"
          echo "The repository content needs updating" >> "$GITHUB_STEP_SUMMARY"

          echo "metadata_file=setup.py" >> "$GITHUB_ENV"
          echo "metadata_file=setup.py" >> "$GITHUB_OUTPUTS"
        else
          echo "Unsupported or missing project metadata ❌"; exit 1
        fi

    - name: "Extract Python project naming"
      id: project-naming
      # yamllint disable-line rule:line-length
      uses: os-climate/osc-github-devops/.github/actions/python-project-name-action@main

    - name: "Determine versioning type [static|dynamic]"
      if: steps.project-toml.outputs.type == 'file'
      id: versioning-type
      # yamllint disable-line rule:line-length
      uses: os-climate/osc-github-devops/.github/actions/python-versioning-type-action@main

    - name: "Get supported Python versions (Base/build and JSON)"
      id: supported-python-versions
      # yamllint disable-line rule:line-length
      uses: os-climate/osc-github-devops/.github/actions/python-supported-versions-action@main

    - name: "Display summary output"
      shell: bash
      run: |
        # Display summary output
        echo "# 🐍 Python Project" >> "$GITHUB_STEP_SUMMARY"

        echo "Gathered Python project metadata"

        echo "| Key | Value |" >> "$GITHUB_STEP_SUMMARY"
        echo "| ----------------- | ------- |" >> "$GITHUB_STEP_SUMMARY"
        echo "| Project name | ${{ steps.project-naming.outputs.python_project_name }} |" >> "$GITHUB_STEP_SUMMARY"
        echo "| Package name | ${{ steps.project-naming.outputs.python_build_name }} |" >> "$GITHUB_STEP_SUMMARY"
        echo "| Package file | ${{ steps.metadata-file.outputs.metadata_file }} |" >> "$GITHUB_STEP_SUMMARY"
        if [ "${{ steps.project-toml.outputs.type }}" = "file" ]; then
          echo "| Versioning type | ${{ steps.versioning-type.outputs.versioning_type }} |" >> "$GITHUB_STEP_SUMMARY"
        fi
        echo "| Base/Build Python | ${{ steps.supported-python-versions.outputs.base_python }} |" \
          >> "$GITHUB_STEP_SUMMARY"

        echo "### Python versions JSON for matrix jobs" >> "$GITHUB_STEP_SUMMARY"
        echo "${{ steps.supported-python-versions.outputs.matrix_json }}" >> "$GITHUB_STEP_SUMMARY"
