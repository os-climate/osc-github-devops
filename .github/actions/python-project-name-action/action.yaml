---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2024 The Linux Foundation

# python-project-name-action
name: "üêç Get Python Project Name"
description: "Returns the name of the Python Project"
# Retrieves from either pyproject.toml or setup.py

outputs:
  PYTHON_PROJECT_NAME:
    description: "The name of the Python project from pyproject.toml or setup.py"
    value: ${{ steps.variables.outputs.python_project_name }}
  PYTHON_BUILD_NAME:
    # Any dashes in the name will be replaced with underscores
    description: "The name of the Python project when built"
    value: ${{ steps.variables.outputs.python_build_name }}

runs:
  using: "composite"
  steps:
    # yamllint disable-line rule:line-length
    - uses: lfit/releng-reusable-workflows/.github/actions/path-check-action@11530dee75e77f063c6e01ac7f3a6cb0cdc95db7 # 2025-02-05
      id: setup-py
      with:
        path: "setup.py"

    # yamllint disable-line rule:line-length
    - uses: lfit/releng-reusable-workflows/.github/actions/path-check-action@11530dee75e77f063c6e01ac7f3a6cb0cdc95db7 # 2025-02-05
      id: pyproject-toml
      with:
        path: "pyproject.toml"

    - name: "Use project name from setup.py"
      id: setup-py-name
      if: steps.setup-py.outputs.type == 'file'
      # yamllint disable-line rule:line-length
      uses: lfit/releng-reusable-workflows/.github/actions/file-grep-regex-action@0b3caf21542fc99480016a2c3759264807880bff # 2025-01-30
      with:
        flags: "-oP -m1"
        regex: '(?<=name=")([^"]*)'
        filename: "setup.py"

    - name: "Use project name from pyproject.toml"
      id: pyproject-toml-name
      if: steps.pyproject-toml.outputs.type == 'file'
      # yamllint disable-line rule:line-length
      uses: lfit/releng-reusable-workflows/.github/actions/file-grep-regex-action@0b3caf21542fc99480016a2c3759264807880bff # 2025-01-30
      with:
        flags: "-oP -m1"
        regex: '(?<=^name = ")([^"]*)'
        filename: "pyproject.toml"

    - name: "Throw error if Python project metadata was NOT found"
      if: steps.pyproject-toml.outputs.type == 'invalid' &&
        steps.setup-py.outputs.type == 'invalid'
      shell: bash
      run: |
        # Throw error if Python project metadata was NOT found
        echo "Neither pyproject.toml NOR setup.py were found"; exit 1

    - name: "Return extracted values"
      id: variables
      shell: bash
      run: |
        # Return extracted values

        # pyproject.toml is preferred source if both files exist
        if [ ${{ steps.pyproject-toml.outputs.type == 'file' }} ]; then
          echo "Using project name from source: pyproject.toml"
          PYTHON_PROJECT_NAME="${{ steps.pyproject-toml-name.outputs.extracted_string}}"

        elif [ ${{ steps.setup-py.outputs.type == 'file' }} ]; then
          echo "Using project name from source: setup.py"
          PYTHON_PROJECT_NAME="${{ steps.setup-py-name.outputs.extracted_string}}"
        fi

        if [ -z "$PYTHON_PROJECT_NAME" ]; then
          echo "The project name extraction failed ‚ùå"; exit 1
        fi

        echo "python_project_name: $PYTHON_PROJECT_NAME ‚úÖ"

        # Replace all dashes in the name with underscores
        PYTHON_BUILD_NAME=$(echo "$PYTHON_PROJECT_NAME" | tr '-' '_')
        echo "python_build_name: $PYTHON_BUILD_NAME"

        # Make available to the GitHub environment
        echo "python_project_name=$PYTHON_PROJECT_NAME" >> "$GITHUB_ENV"
        echo "python_project_name=$PYTHON_PROJECT_NAME" >> "$GITHUB_OUTPUT"
        echo "python_build_name=$PYTHON_BUILD_NAME" >> "$GITHUB_ENV"
        echo "python_build_name=$PYTHON_BUILD_NAME" >> "$GITHUB_OUTPUT"
