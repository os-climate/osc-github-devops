---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2024 The Linux Foundation

name: "🏷️ Current/Latest Repository Tag"
description: "Returns the latest tag value from the repository"

inputs:
  TYPE:
    description: "Returns the current/latest tag from repository [all|production|development]"
    required: false
    type: string
    default: "all"

outputs:
  TAG_COUNT:
    description: "The number of tags in this repository"
    value: ${{ steps.fetch.outputs.count }}
  TAG:
    description: "Return the latest semantic tag from repository"
    value: ${{ steps.latest.outputs.tag }}
  NUMERIC_TAG:
    description: "The tag [without any v/V prefix] e.g. 1.2.3"
    value: ${{ steps.latest.outputs.numeric_tag }}
  SEMANTIC:
    description: "Set true if current tag is semantic"
    value: ${{ steps.validate.outputs.semantic }}

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v4

    - name: "Fetch tags"
      id: fetch
      shell: bash
      if: startsWith(github.ref, 'refs/tags/') != true
      # Don't fetch tags if a tag was pushed, it will result in an error, e.g.
      # Fetching tags...
      # From https://github.com/os-climate/osc-github-devops
      #  * [new branch]      main       -> origin/main
      #  * [new tag]         v0.0.0     -> v0.0.0
      #  ! [rejected]        v0.0.2     -> v0.0.2  (would clobber existing tag)
      run: |
        # Workaround for: https://github.com/actions/checkout/issues/1471
        echo "Fetching tags..."
        git fetch --tags
        TAG_COUNT=$(git tag -l | wc -l)
        echo "tag_count=$TAG_COUNT" >> "$GITHUB_ENV"
        echo "tag_count=$TAG_COUNT" >> "$GITHUB_OUTPUT"

    - name: "Warning: no tags currently found in repository"
      if: env.tag_count == '0'
      shell: bash
      run: |
        echo "Warning: no tags currently found in repository ❌"
        echo "Warning: no tags currently found in repository ❌" >> "$GITHUB_STEP_SUMMARY"

    - name: "Return latest tag"
      if: env.tag_count != '0'
      id: latest
      shell: bash
      run: |
        # Return latest tag
        TAG=$(git tag -l --sort=committerdate | grep -o '?*.*.*' | sort -rV | head -1 || true)

        if [ ${{ env.tag_count}} == '0' ]; then
          TAG="0.0.0"
        elif [ ${{ inputs.TYPE }} = "all" ]; then
          TAG=$(git tag -l --sort=committerdate | grep -o '?*.*.*' | \
          sort -rV | head -1 || true)
        elif [ ${{ inputs.TYPE }} = "production" ]; then
          TAG=$(git tag -l --sort=committerdate | grep -o '?*.*.*' | \
          grep -Ev '(dev|alpha|beta|test)' | sort -rV | head -1 || true)
        elif [ ${{ inputs.TYPE }} = "development" ]; then
          TAG=$(git tag -l --sort=committerdate | grep -o '?*.*.*' | \
          grep -E '(dev|pre|beta|test|alpha)' | sort -rV | head -1 || true)
        else
          echo "Error: invalid tag type requested ❌"
          echo "Error: invalid tag type requested ❌" >> "$GITHUB_STEP_SUMMARY"
          exit 1
        fi

        # Extract only numbers and dots; useful for later manipulation
        NUMERIC_TAG=$(echo $TAG | grep -oe '\([0-9.]*\)')

        echo "tag: ${TAG} [${NUMERIC_TAG}]"
        echo "Current/latest repository tag: ${TAG} [${NUMERIC_TAG}] 🏷️" >> "$GITHUB_STEP_SUMMARY"
        echo "tag=${TAG}" >> "$GITHUB_ENV"
        echo "tag=${TAG}" >> "$GITHUB_OUTPUT"
        echo "numeric_tag=${NUMERIC_TAG}" >> "$GITHUB_ENV"
        echo "numeric_tag=${NUMERIC_TAG}" >> "$GITHUB_OUTPUT"

    - name: "Check semantic/validity"
      id: validate
      uses: os-climate/osc-github-devops/.github/actions/tag-validate-semantic-action@main
      with:
        tag: ${{ env.tag }}

    - name: "Set flag if semantic"
      id: report-semantic
      shell: bash
      run: |
        # Set flag if semantic
        if [ "${{ steps.validate.outputs.semantic }}" = "true" ]; then
          echo "Current/latest repository tag is semantic ✅" >> "$GITHUB_STEP_SUMMARY"
        else
          echo "Current/latest repository tag is NOT semantic ❌" >> "$GITHUB_STEP_SUMMARY"
        fi
