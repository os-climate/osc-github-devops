---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2024 The Linux Foundation

name: "🏷️ Check/Inject Issue-ID"

inputs:
  # Required
  COMMIT_MESSAGE_BODY:
    description: "Commit message body to amend"
    type: string
    required: true
  ISSUE_ID_LOOKUP_JSON:
    description: "JSON lookup table mapping users to JIRA tickets"
    type: string
    required: true
  # Optional
  COMMIT_USER_NAME:
    description: "User used to perform the commit"
    type: string
    required: false
    default: "github-actions[bot]"
  COMMIT_USER_EMAIL:
    description: "User used to perform the commit"
    type: string
    required: false
    default: "41898282+github-actions[bot]@users.noreply.github.com"

outputs:
  PRESENT:
    description: "Whether the Issue-ID string is present"
    value: ${{ steps.fetch.outputs.count }}

runs:
  using: "composite"
  steps:
    - name: "Checkout Pull Request"
      uses: actions/checkout@v4
      with:
        ref: ${{ github.head_ref }}
        fetch-depth: 0

    - name: "Check commit message for required string"
      id: check
      shell: bash
      run: |
        # Check commit message for required string

        # Gerrit reg-ex expression is:
        # Issue-ID: ([A-Z][A-Z0-9]{1,9}-\\d+)

        COMMIT_MESSAGE="${{ inputs.COMMIT_MESSAGE_BODY }}"
        if [[ "$COMMIT_MESSAGE" =~ "Issue-ID: " ]]; then
          echo "✅ Issue-ID was found in the pull request"
          echo "PRESENT=true" >> "$GITHUB_ENV"
          echo "PRESENT=true" >> "$GITHUB_OUTPUT"
        else
          echo "❌ Issue-ID was NOT found in the pull request"
          echo "PRESENT=false" >> "$GITHUB_ENV"
          echo "PRESENT=false" >> "$GITHUB_OUTPUT"
        fi

    - name: "Looking up appropriate JIRA ticket for this change"
      id: lookup
      shell: bash
      run: |
        # Look up appropriate JIRA ticket for this change
        ACTOR="${{ github.actor }}"
        ACTOR_ID="${{ github.actor_id }}"
        echo "Actor: $ACTOR [$ACTOR_ID]"

        # Check lookup table variable
        if [ -z "${{ inputs.ISSUE_ID_LOOKUP_JSON }}" ]; then
          echo "The required lookup variable/JSON is not set: ISSUE_ID_LOOKUP_JSON"; exit 1
        fi

        JQ=$(which jq || true)
        if [ -x "$JQ" ]; then
          KEY="$ACTOR"
          # yamllint disable-line rule:line-length
          VALUE=$(echo '${{ inputs.ISSUE_ID_LOOKUP_JSON }}' | \
            jq -r --arg KEY "$KEY" '.[] | select(.key==$KEY) | .value')
          if [ -z "$VALUE" ]; then
            echo "❌ The key/value lookup failed"; exit 1
          fi
          echo "✅ Issue-ID: $VALUE"
        else
          echo "Error: jq command was NOT found in the PATH"; exit 1
        fi
        echo "issue_id=$VALUE" >> "$GITHUB_ENV"
        echo "issue_id=$VALUE" >> "$GITHUB_OUTPUT"
        echo "### 🏷️ Issue-ID: $VALUE" >> "$GITHUB_STEP_SUMMARY"

    - name: "Injecting Issue-ID into body of first commit message"
      id: inject
      if: env.PRESENT == 'false'
      shell: bash
      run: |
        # Injecting Issue-ID into body of first commit
        set -vx
        git fetch; git pull
        git config user.name "${{ inputs.COMMIT_USER_NAME }}"
        git config user.email "${{ inputs.COMMIT_USER_EMAIL }}"
        git commit --amend -m"${{ inputs.COMMIT_MESSAGE_BODY }}" -m"Issue-ID: ${{ env.issue_id }}" --no-verify --no-edit
        git push
