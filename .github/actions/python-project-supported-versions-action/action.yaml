---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2024 The Linux Foundation

# python-project-supported-versions-action
name: "↗️ Extract Python supported versions from pyproject.toml"
description: "Returns base version for builds and JSON for use in matrix jobs"
# Base version is the lowest supported Python version specified

# ToDo: Support or implement requires-python support, e.g.
# requires-python = "<3.13,>=3.10"

outputs:
  BASE_PYTHON:
    description: "Lowest supported Python version specified by project"
    value: ${{ steps.parse-metadata.outputs.base_python }}
  MATRIX_JSON:
    description: "All Python versions supported by project as JSON string"
    # Example: matrix_json = {"python-version": ["3.10", "3.11"]}
    value: ${{ steps.parse-metadata.outputs.matrix_json }}

runs:
  using: "composite"
  steps:
    - name: "Check for: pyproject.toml"
      id: pyproject-toml
      # yamllint disable-line rule:line-length
      uses: os-climate/osc-github-devops/.github/actions/path-check-action@edfd2709ced51496d7de1825c0f7ccdb52b1e485 # 2025-01-29
      with:
        path: "pyproject.toml"

    - name: "Check for: setup.py"
      id: setup-py
      # yamllint disable-line rule:line-length
      uses: os-climate/osc-github-devops/.github/actions/path-check-action@edfd2709ced51496d7de1825c0f7ccdb52b1e485 # 2025-01-29
      with:
        path: "setup.py"

    - name: "Error: No supported metadata file found"
      if: steps.pyproject-toml.outputs.type != 'file'
      shell: bash
      run: |
        # Error: No supported metadata file found
        echo "⛔️ No supported project metadata file found"
        exit 1

    - name: "Parse supported Python versions from pyproject.toml"
      id: capture-versions
      # yamllint disable-line rule:line-length
      uses: lfit/releng-reusable-workflows/.github/actions/file-grep-regex-action@edbf8500dcbe4c63ea07b13f4077a7f29bbecb11 # 2025-01-22
      with:
        flags: "-oP"
        # https://regex101.com/r/0mhOlr/1
        # Only matches explicit/full Python versions
        # Those with major/minor versions, e.g. 3.10, 3.11
        regex: '(?<="Programming Language :: Python :: ).*\..*(?=")'
        filename: "pyproject.toml"

    - id: parse-metadata
      name: "Process and transform extracted string"
      if: steps.pyproject-toml.outputs.type == 'file'
      shell: bash
      run: |
        # Process extracted string
        set -o pipefail

        PYTHON_VERSIONS=$(echo \
          "${{ steps.capture-versions.outputs.extracted_string }}" \
          | sort | uniq | tr -d ' ') 2>/dev/null

        BASE_PYTHON=$(echo "${PYTHON_VERSIONS}" | head -1)

        STRING=$(echo "$PYTHON_VERSIONS" | awk '{print "\""$1"\""}' | paste -s -d, -)
        STRING="[$STRING]"

        MATRIX_JSON="{\"python-version\": $STRING}"
        if ! (echo "$MATRIX_JSON" | jq); then
          echo "❌ Parsing error; output is NOT valid JSON"; exit 1
        fi
        echo "base_python=$BASE_PYTHON" >> "$GITHUB_ENV"
        echo "base_python=$BASE_PYTHON" >> "$GITHUB_OUTPUT"
        echo "base_python = $BASE_PYTHON"
        echo "matrix_json=$MATRIX_JSON" >> "$GITHUB_ENV"
        echo "matrix_json=$MATRIX_JSON" >> "$GITHUB_OUTPUT"
        echo "matrix_json = $MATRIX_JSON"
