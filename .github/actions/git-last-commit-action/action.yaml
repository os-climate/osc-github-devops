---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2024 The Linux Foundation

# git-last-commit-action
name: "üóûÔ∏è Report on last GIT commit"
description: "Extracts information and changes from the last two commits"

inputs:
  FILENAME:
    description: "Returns true if filename was modified"

  FILE_PATH:
    description: "Returns true if file path was modified"

outputs:
  LATEST_COMMIT_SHA:
    description: "SHA value for latest commit"
    value: ${{ steps.parse-commits.outputs.latest_commit_sha }}
  PREVIOUS_COMMIT_SHA:
    description: "SHA value for previous commit"
    value: ${{ steps.parse-commits.outputs.previous_commit_sha }}
  FILES_CHANGED:
    description: "SHA value for latest commit"
    value: ${{ steps.parse-commits.outputs.files_changed }}
  MODIFIED:
    description: "Returns true if supplied filename or path was modified"
    value: ${{ steps.parse-commits.outputs.files_changed }}

runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        fetch-depth: 2

    - name: Process last two commits
      id: process-commits
      shell: bash
      run: |
        # Process last two commits
        LATEST_COMMIT_SHA=$(git rev-parse @~0)
        PREVIOUS_COMMIT_SHA=$(git rev-parse @~1)
        FILES_CHANGED=$(git diff --name-only "$LATEST_COMMIT_SHA" "$PREVIOUS_COMMIT_SHA")

        echo "‚è±Ô∏è Latest commit: $LATEST_COMMIT_SHA"
        echo "latest_commit_sha=$LATEST_COMMIT_SHA" >> "$GITHUB_ENV"
        echo "latest_commit_sha=$LATEST_COMMIT_SHA" >> "$GITHUB_OUTPUT"
        echo "‚è™ Previous commit: $PREVIOUS_COMMIT_SHA"
        echo "previous_commit_sha=$PREVIOUS_COMMIT_SHA" >> "$GITHUB_ENV"
        echo "previous_commit_sha=$PREVIOUS_COMMIT_SHA" >> "$GITHUB_OUTPUT"
        if [ -n "$FILES_CHANGED" ]; then
          echo "üìÅ Files changed:"
          echo "$FILES_CHANGED"
          { echo 'files_changed<<EOF'
            echo "$FILES_CHANGED"
            echo EOF
          } >> "$GITHUB_ENV"
          { echo 'files_changed<<EOF'
            echo "$FILES_CHANGED"
            echo EOF
          } >> "$GITHUB_OUTPUT"
        fi
