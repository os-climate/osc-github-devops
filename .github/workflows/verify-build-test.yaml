---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2024 The Linux Foundation

# Runs on a new pull request, performs build and runs tests
name: "ðŸ¤– Build/Test [Pull Request]"

# yamllint disable-line rule:truthy
on:
  workflow_dispatch:
  pull_request:
    types: [opened, reopened, edited, synchronize]
    branches:
      - main
      - master
    paths:
      - "**"
      - "!.github/**"
      - "!.*"
      - "!tox.ini"

permissions: {}

jobs:
  one-password:
    name: "1Password"
    # yamllint disable-line rule:line-length
    uses: os-climate/osc-github-devops/.github/workflows/reuse-one-password.yaml@main
    #Â Do NOT run until change is merged; secrets will NOT be available and workflow WILL fail
    if: github.event_name != 'pull_request'
    with:
      ACCESS_TYPE: "production"
      VAULT_ITEM: "op://hdiyadcjno2knqgvcy4wj5ulya/Test Secure Note/notesPlain"
      EXPORT: false
    secrets:
      # Test development credentials
      ONE_PASSWORD_DEVELOPMENT: ${{ secrets.ONE_PASSWORD_DEVELOPMENT }}
      ONE_PASSWORD_PRODUCTION: ${{ secrets.ONE_PASSWORD_PRODUCTION }}
    permissions: {}

  check-secrets:
    name: "Required credentials"
    runs-on: ubuntu-24.04
    permissions: {}
    steps:
      - name: "Check for required secrets/API keys/tokens"
        # yamllint disable-line rule:line-length
        uses: os-climate/osc-github-devops/.github/actions/test-github-secrets-action@main
        with:
          # Mandatory secrets/variables to check
          pypi_development: ${{ secrets.PYPI_DEVELOPMENT }}
          pypi_production: ${{ secrets.PYPI_PRODUCTION }}
          one_password_development: ${{ secrets.ONE_PASSWORD_DEVELOPMENT }}

  repository:
    name: "Repository"
    # yamllint disable-line rule:line-length
    uses: os-climate/osc-github-devops/.github/workflows/reuse-inspect-repository.yaml@main
    permissions:
      # Required for action that creates labels: github-labels
      contents: read

  python-project:
    name: "Python project"
    needs: repository
    if: needs.repository.outputs.python_project  == 'true'
    runs-on: ubuntu-24.04
    outputs:
      matrix_json: ${{ steps.python-project.outputs.matrix_json }}
      artefact_path: ${{ steps.python-project.outputs.artefact_path }}
    permissions:
      contents: write
      # Required by SigStore signing action
      id-token: write
      # Required for attestations
      attestations: write
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: "Build Python project"
        id: python-project
        # yamllint disable-line rule:line-length
        uses: os-climate/osc-github-devops/.github/actions/python-project-build-action@main
        with:
          build_tag: ${{ needs.repository.outputs.build_tag }}

  python-test:
    name: "Test"
    # yamllint disable-line rule:line-length
    uses: os-climate/osc-github-devops/.github/workflows/reuse-python-tests.yaml@main
    needs:
      - python-project
    #Â Matrix job
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.python-project.outputs.matrix_json) }}
    with:
      python_version: ${{ matrix.python-version }}
    permissions:
      contents: read

  python-security:
    name: "Security"
    # yamllint disable-line rule:line-length
    uses: os-climate/osc-github-devops/.github/workflows/reuse-python-audit.yaml@main
    needs:
      - python-project
    #Â Matrix job
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.python-project.outputs.matrix_json) }}
    with:
      python_version: ${{ matrix.python-version }}
    permissions:
      contents: read

  notebooks:
    name: "Jupyter notebooks"
    if: needs.repository.outputs.jupyter_notebooks  == 'true'
    # yamllint disable-line rule:line-length
    uses: os-climate/osc-github-devops/.github/workflows/reuse-notebook-tests.yaml@main
    needs:
      - repository
      - python-project
    #Â Matrix job
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.python-project.outputs.matrix_json) }}
    with:
      python_version: ${{ matrix.python-version }}
    permissions:
      contents: read

  github-release:
    name: "Release"
    if: startsWith(github.ref, 'refs/tags/') || contains(github.event.head_commit.message, '[release]')
    needs:
      - repository
      - python-project
      - python-test
      - python-security
    runs-on: "ubuntu-24.04"
    permissions:
      contents: write
    steps:
      # yamllint disable-line rule:line-length
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: "Extract project/repository naming"
        id: naming
        # yamllint disable-line rule:line-length
        uses: os-climate/osc-github-devops/.github/actions/project-name-vs-repo-action@main

      - name: "â¬‡ Download build artefacts"
        # yamllint disable-line rule:line-length
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: ${{ env.python_project_name }}
          path: "dist"

      - name: "Check project version matches pushed tags"
        if: startsWith(github.ref, 'refs/tags/')
        # yamllint disable-line rule:line-length
        uses: os-climate/osc-github-devops/.github/actions/python-project-version-vs-tag-action@main

      - name: "GitHub Release"
        # yamllint disable-line rule:line-length
        uses: os-climate/osc-github-devops/.github/actions/github-release-action@main
        with:
          project_name: ${{ env.python_project_name }}
          artefact_location: "dist"
          build_tag: ${{ needs.repository.outputs.build_tag }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

  ### Action code

  #  pypi-test:
  #    name: "Test PyPI Package Publishing"
  #    needs:
  #      - repository
  #      - python-project
  #      - python-security
  #      - python-test
  #    runs-on: "ubuntu-24.04"
  #    # environment: development
  #    permissions:
  #      contents: read
  #      # Needed for trusted publishing; must also be passed from parent workflows
  #      id-token: write
  #    env:
  #      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #    steps:
  #      #Â Need repository content to extract project name
  #      - name: "Publish to Test PyPI"
  #        uses: os-climate/osc-github-devops/.github/actions/python-pypi-publish-action@main
  #        with:
  #          # environment: development
  #          build_tag: ${{ needs.repository.outputs.build_tag }}
  #          one_password_item: "op://hdiyadcjno2knqgvcy4wj5ulya/tm2ffuusrynfivtcsnamginhm4/password"
  #          op_service_account_token: ${{ secrets.ONE_PASSWORD_PRODUCTION }}
  #          pypi_credential: ${{ secrets.PYPI_PRODUCTION }}

  #  pypi:
  #    name: "Release to PyPI"
  #    if: startsWith(github.ref, 'refs/tags/') || contains(github.event.head_commit.message, '[release]')
  #    needs:
  #      - repository
  #      - python-project
  #      - python-test
  #      - python-security
  #      - pypi-test
  #    runs-on: "ubuntu-24.04"
  #    # environment: production
  #    permissions:
  #      contents: read
  #      # Needed for trusted publishing; must also be passed from parent workflows
  #      id-token: write
  #    env:
  #      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #    steps:
  #      #Â Need repository content to extract project name
  #      - name: "Publish to PyPI"
  #        uses: os-climate/osc-github-devops/.github/actions/python-pypi-publish-action@main
  #        with:
  #          # environment: production
  #          build_tag: ${{ needs.repository.outputs.build_tag }}
  #          one_password_item: "op://hdiyadcjno2knqgvcy4wj5ulya/vds5rebqxeqfrjqwpszxxicmzq/password"
  #          op_service_account_token: ${{ secrets.ONE_PASSWORD_PRODUCTION }}
  #          pypi_credential: ${{ secrets.PYPI_PRODUCTION }}

  ### Reusable code

  pypi-test:
    name: "Test"
    # yamllint disable-line rule:line-length
    uses: os-climate/osc-github-devops/.github/workflows/reuse-publish-pypi.yaml@main
    needs:
      - repository
      - python-project
      - python-test
      - python-security
    with:
      environment: "development"
      build_tag: ${{ needs.repository.outputs.build_tag }}
      one_password_item: "op://hdiyadcjno2knqgvcy4wj5ulya/tm2ffuusrynfivtcsnamginhm4/password"
    permissions:
      contents: read
      # Needed for trusted publishing; must also be passed from parent workflows
      id-token: write
    secrets:
      OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.ONE_PASSWORD_PRODUCTION }}
      PYPI_CREDENTIAL: ${{ secrets.PYPI_DEVELOPMENT }}

  pypi:
    name: "Release"
    # yamllint disable-line rule:line-length
    if: startsWith(github.ref, 'refs/tags/') || contains(github.event.head_commit.message, '[release]')
    # yamllint disable-line rule:line-length
    uses: os-climate/osc-github-devops/.github/workflows/reuse-publish-pypi.yaml@main
    needs:
      - repository
      - python-project
      - python-test
      - python-security
      - pypi-test
    with:
      environment: "production"
      build_tag: ${{ needs.repository.outputs.build_tag }}
      one_password_item: "op://hdiyadcjno2knqgvcy4wj5ulya/vds5rebqxeqfrjqwpszxxicmzq/password"
    permissions:
      contents: read
      # Needed for trusted publishing; must also be passed from parent workflows
      id-token: write
    secrets:
      OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.ONE_PASSWORD_PRODUCTION }}
      PYPI_CREDENTIAL: ${{ secrets.PYPI_PRODUCTION }}
