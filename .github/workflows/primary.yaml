---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2024 The Linux Foundation <https://linuxfoundation.org>

name: "ðŸ¤– [DM] DevOps Automation"

# yamllint disable-line rule:truthy
on:
  workflow_dispatch:
  push:
    paths:
      - "**"
      - "!.github/**"

jobs:
  one-password:
    name: "1Password"
    uses: os-climate/osc-github-devops/.github/workflows/one-password.yaml@main
    #Â Do NOT run until change is merged; secrets will NOT be available and workflow WILL fail
    if: github.event_name != 'pull_request'
    with:
      ACCESS_TYPE: "production"
      VAULT_ITEM: "op://hdiyadcjno2knqgvcy4wj5ulya/Test Secure Note/notesPlain"
      EXPORT: false
    secrets:
      # Test development credentials
      ONE_PASSWORD_DEVELOPMENT: ${{ secrets.ONE_PASSWORD_DEVELOPMENT }}
      ONE_PASSWORD_PRODUCTION: ${{ secrets.ONE_PASSWORD_PRODUCTION }}

  repository:
    name: "Repository"
    uses: os-climate/osc-github-devops/.github/workflows/repository.yaml@main
    permissions:
      # Required for action that creates labels: github-labels
      contents: write

  check-secrets:
    name: "Required Credentials"
    runs-on: ubuntu-latest
    steps:
      - name: "Check for required secrets/API keys/tokens"
        uses: os-climate/osc-github-devops/.github/actions/github-secrets@main
        with:
          # Mandatory secrets/variables to check
          pypi_development: ${{ secrets.PYPI_DEVELOPMENT }}
          pypi_production: ${{ secrets.PYPI_PRODUCTION }}
          one_password_development: ${{ secrets.ONE_PASSWORD_DEVELOPMENT }}

  python-project:
    name: "Python Project"
    needs: repository
    if: needs.repository.outputs.python_project  == 'true'
    runs-on: ubuntu-latest
    outputs:
      # Gather Python project metadata
      python_project_name: ${{ steps.python_project_metadata.outputs.python_project_name }}
      python_build_name: ${{ steps.python_project_metadata.outputs.python_build_name }}
      versioning_type: ${{ steps.python_project_metadata.outputs.versioning_type }}
      matrix_json: ${{ steps.python_project_metadata.outputs.matrix_json }}
      build_python_version: ${{ steps.python_project_metadata.outputs.build_python_version }}
    steps:
      - name: "Extract Metadata"
        id: python_project_metadata
        uses: os-climate/osc-github-devops/.github/actions/python-project-setup@main

  python-build:
    name: "Build"
    uses: os-climate/osc-github-devops/.github/workflows/python-build.yaml@main
    needs:
      - repository
      - python-project
    permissions:
      contents: write
      # Required by SigStore signing action
      id-token: write
      # Required for attestations
      attestations: write
    with:
      build_python_version: ${{ needs.python-project.outputs.build_python_version }}
      build_tag: "v5.0.0-dev2"

  python-test:
    name: "Test"
    uses: os-climate/osc-github-devops/.github/workflows/python-test-matrix.yaml@main
    needs:
      - python-project
      - python-build
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.python-project.outputs.matrix_json) }}
    with:
      python_version: ${{ matrix.python-version }}

  github-release:
    name: "GitHub Release"
    if: startsWith(github.ref, 'refs/tags/') || contains(github.event.head_commit.message, '[release]')
    uses: os-climate/osc-github-devops/.github/workflows/github-release.yaml@main
    needs:
      - repository
      - python-build
      - python-test
      - python-security
    permissions:
      #Â Needed both here and in the called workflow
      contents: write
    with:
      build_tag: "v5.0.0-dev2"

  pypi-test:
    name: "Publish [Test]"
    uses: os-climate/osc-github-devops/.github/workflows/pypi-publish.yaml@main
    needs:
      - repository
      - python-build
      - python-test
      - python-security
    with:
      build_tag: "v5.0.0-dev2"
    secrets:
      ONE_PASSWORD_PRODUCTION: ${{ secrets.ONE_PASSWORD_PRODUCTION }}

  pypi:
    name: "Publish"
    uses: os-climate/osc-github-devops/.github/workflows/pypi-publish.yaml@main
    needs:
      - repository
      - python-build
      - python-test
      - python-security
      - pypi-test
    with:
      test: false
      build_tag: "v5.0.0-dev2"
    secrets:
      ONE_PASSWORD_PRODUCTION: ${{ secrets.ONE_PASSWORD_PRODUCTION }}

  python-security:
    name: "Security/Audit"
    needs:
      - repository
      - python-project
      - python-build
    if: needs.repository.outputs.python_project  == 'true'
    runs-on: "ubuntu-latest"
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.python-project.outputs.matrix_json) }}
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4

      - name: "Set up Python ${{ matrix.python-version }}"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: "Install PDM tooling"
        uses: pdm-project/setup-pdm@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: "Install dependencies"
        run: |
          pip install -q --upgrade pip
          pdm lock
          pdm export -o requirements.txt
          python -m pip install -q -r requirements.txt
          python -m pip install -q .
          pip install --upgrade -q setuptools
          pdm list --graph

      - name: "Perform package auditing"
        uses: pypa/gh-action-pip-audit@v1.1.0

  notebooks:
    name: "Jupyter/Notebooks"
    needs:
      - repository
      - python-project
      - python-build
    runs-on: "ubuntu-latest"
    continue-on-error: false
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.python-project.outputs.matrix_json) }}
    # Don't run when pull request is merged, only if Jupyter Notebooks are present
    if: needs.repository.outputs.jupyter_notebooks  == 'true'

    steps:
      - uses: actions/checkout@v4

      - name: "Setup Python"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: "Set up Python ${{ matrix.python-version }}"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: "Install PDM tooling"
        uses: pdm-project/setup-pdm@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: "Install notebook/test dependencies"
        run: |
          # Install notebook/test dependencies
          python -m pip install -q --upgrade pip
          pdm export -o requirements.txt
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          pip install -q .
          pip install -q pytest nbmake

      - name: "Testing Jupyter notebooks"
        run: |
          # Testing Jupyter notebooks
          # Consider enabling the line below when debugging/testing
          # find . -name '*.ipynb'
          echo "Running command: pytest --nbmake -- **/*.ipynb"
          pytest --nbmake src/*/*.ipynb --cov=src/devops_reusable_workflows
          #Â Might need an __init__.py file in tests folder for notebooks there to be tested?
          # https://stackoverflow.com/questions/47287721/coverage-py-warning-no-data-was-collected-no-data-collected
          # pytest --nbmake tests/test_*.ipynb --cov=tests

      # TEMP DISABLED - NEED TO CHECK - WHERE ARE THESE LOGS GENERATED???
      # - name: "Upload Logs"
      #   if: always()
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: debug-logs
      #     path: /tmp/*.log
      #     retention-days: 14
