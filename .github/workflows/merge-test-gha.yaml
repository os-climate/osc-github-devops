---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2024 The Linux Foundation

# Test/validation suite for individual actions and workflows
name: "🧪 Test GitHub Actions"

# yamllint disable-line rule:truthy
on:
  workflow_dispatch:
  push:
    branches: ["main", "master"]
    paths: [".github/**"]

#  pull_request:
#    types: [opened, reopened, edited, synchronize]
#    paths: [".github/**"]
#    branches: ["main", "master"]

permissions: {}

jobs:
  ### Test Individual Composite Actions ###

  one-password:
    name: "1Password"
    uses: os-climate/osc-github-devops/.github/workflows/reuse-one-password.yaml@main
    # Do NOT run until change is merged; secrets will NOT be available and workflow WILL fail
    if: github.event_name != 'pull_request'
    with:
      ACCESS_TYPE: "development"
      VAULT_ITEM: "op://67hdehutbpddhfbgm6ffjvdsbu/Test Secure Note/notesPlain"
      EXPORT: false
    secrets:
      ONE_PASSWORD_DEVELOPMENT: ${{ secrets.ONE_PASSWORD_DEVELOPMENT }}
    # Does not need to interact with GitHub not the repository at all
    permissions: {}

  repository:
    name: "Repository Content"
    uses: os-climate/osc-github-devops/.github/workflows/reuse-inspect-repository.yaml@main
    permissions:
      contents: read

  tests:
    name: "Action/Workflow Tests"
    runs-on: ubuntu-24.04
    # if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    permissions:
      contents: read
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

        with:
          # Does not currently work: https://github.com/actions/checkout/issues/1471
          fetch-tags: true
          # The repository-tag-current action currently contains a workaround for this behaviour

      - name: "Action: github-get-latest-release-action"
        id: github-get-latest-release-action
        # yamllint disable-line rule:line-length
        uses: os-climate/osc-github-devops/.github/actions/github-get-latest-release-action@main

        # ToDo: Validate step for github-get-latest-release-action (above)

      - name: "Action: git-commit-message"
        id: git-commit-message
        # yamllint disable-line rule:line-length
        uses: lfit/releng-reusable-workflows/.github/actions/git-commit-message-action@46fce72e65b1838c2bfbc6ba0ad29cdd9f229303 # 2025-02-10

      - name: "Action: python-project-name-action"
        id: python-project-name-action
        # yamllint disable-line rule:line-length
        uses: lfit/releng-reusable-workflows/.github/actions/python-project-name-action@431c4e424c15544f98ec1321f6668f655c238d3a # 2025-02-10

      - name: "Validate: python-project-name-action"
        shell: bash
        run: |
          # Check output from: python-project-name-action
          PYTHON_PROJECT_NAME="${{ steps.python-project-name-action.outputs.python_project_name }}"
          if [ "$PYTHON_PROJECT_NAME" != "osc-github-devops" ]; then
            echo "ERROR: Python project name was not as expected"
            echo "python_project_name: $PYTHON_PROJECT_NAME"; exit 1
          else
            echo "Returned project name is correct: $PYTHON_PROJECT_NAME"
          fi
          PYTHON_PACKAGE_NAME="${{ steps.python-project-name-action.outputs.python_package_name }}"
          if [ "$PYTHON_PACKAGE_NAME" != "osc_github_devops" ]; then
            echo "ERROR: Python package name was not as expected"
            echo "python_package_name: $PYTHON_PROJECT_NAME"; exit 1
          else
            echo "Returned package name is correct: $PYTHON_PROJECT_NAME"
          fi
          PYTHON_PROJECT_FILE="${{ steps.python-project-name-action.outputs.python_project_file }}"
          if [ "$PYTHON_PROJECT_FILE" != "pyproject.toml" ]; then
            echo "ERROR: Python project file was not as expected"
            echo "python_project_file: $PYTHON_PROJECT_FILE"; exit 1
          else
            echo "Returned Python project file is correct: $PYTHON_PROJECT_FILE"
          fi

      # Note: project-name-action depends on action above (python-project-name-action)
      - name: "Action: project-name-action"
        id: project-name-action
        # yamllint disable-line rule:line-length
        uses: lfit/releng-reusable-workflows/.github/actions/project-name-action@main

      - name: "Validate: project-name-action"
        shell: bash
        run: |
          # Check output from: project-name-action
          PROJECT_NAME="${{ steps.project-name-action.outputs.project_name }}"
          if [ "$PROJECT_NAME" != "osc-github-devops" ]; then
            echo "ERROR: Python project name was not as expected"
            echo "project_name: $PROJECT_NAME"; exit 1
          else
            echo "Returned project name is correct: $PROJECT_NAME"
          fi
          MATCH="${{ steps.project-name-action.outputs.match }}"
          if [ "$MATCH" != "true" ]; then
            echo "ERROR: Flag NOT set indicating project and repository name match"
            exit 1
          else
            echo "Flag set indicating project and repository name match"
          fi

      - name: "Action: python-project-version-action"
        id: python-project
        # yamllint disable-line rule:line-length
        uses: os-climate/osc-github-devops/.github/actions/python-project-version-action@main

      - name: "Validate: python-project-version-action"
        shell: bash
        run: |
          # Check output from: python-project-version-action
          PYTHON_PROJECT_VERSION="${{ steps.python-project.outputs.python_project_version }}"
          if [ "$PYTHON_PROJECT_VERSION" != "0.1.24" ]; then
            echo "ERROR: Python project version was not as expected"
            echo "python_project_version: $PYTHON_PROJECT_VERSION"; exit 1
          else
            echo "Returned project version is correct: $PYTHON_PROJECT_NAME"
          fi

      - name: "Extract TOX stanza"
        id: tox-parse-stanza-action
        # yamllint disable-line rule:line-length
        uses: os-climate/osc-github-devops/.github/actions/tox-parse-stanza-action@main

      - name: "Action: python-supported-versions-action"
        id: python-supported-versions-action
        # yamllint disable-line rule:line-length
        uses: os-climate/osc-github-devops/.github/actions/python-supported-versions-action@main

      - name: "Action: tag-validate-semantic-action [semantic tag]"
        id: tag-validate-semantic-good
        # yamllint disable-line rule:line-length
        uses: os-climate/osc-github-devops/.github/actions/tag-validate-semantic-action@main
        with:
          tag: "v1.2.3"

      - name: "Action: tag-validate-semantic-action [junk tag]"
        id: tag-validate-semantic-junk
        # yamllint disable-line rule:line-length
        uses: os-climate/osc-github-devops/.github/actions/tag-validate-semantic-action@main
        with:
          tag: "v1.not-valid.3.garbage"

      - name: "Validate: tag-validate-semantic-action"
        shell: bash
        run: |
          # Check output from: tag-validate-semantic-action [semantic/junk]
          ERRORS="false"
          if [ "${{ steps.tag-validate-semantic-good.outputs.semantic }}" != "true" ]; then
            echo "Errors with: tag-validate-semantic v1.2.3"
            ERRORS="true"
          fi
          if [ "${{ steps.tag-validate-semantic-junk.outputs.semantic }}" != "false" ]; then
            echo "Errors with: semantic-tag-production v1.not-valid.3.garbage"
            ERRORS="true"
          fi
          if [ "$ERRORS" = "true" ]; then
            echo "ERROR: check semantic tag validation action/code"; exit 1
          else
            echo "All tag validation tests passed, no errors found"
          fi

      - name: "Action: repository-tag-current-action"
        id: repository-tag-current-action
        # yamllint disable-line rule:line-length
        uses: os-climate/osc-github-devops/.github/actions/repository-tag-current-action@main

      - name: "Action: semantic-tag-production-action [patch]"
        id: semantic-tag-production-patch
        # yamllint disable-line rule:line-length
        uses: os-climate/osc-github-devops/.github/actions/semantic-tag-production-action@main
        with:
          tag: "v2.9.6"
          type: "patch"

      - name: "Action: semantic-tag-production-action [minor]"
        id: semantic-tag-production-minor
        # yamllint disable-line rule:line-length
        uses: os-climate/osc-github-devops/.github/actions/semantic-tag-production-action@main
        with:
          tag: "v0.1.2"
          type: "minor"

      - name: "Action: semantic-tag-production-action [major]"
        id: semantic-tag-production-major
        # yamllint disable-line rule:line-length
        uses: os-climate/osc-github-devops/.github/actions/semantic-tag-production-action@main
        with:
          tag: "v1.2.3"
          type: "major"

      - name: "Validate Incremented PROD Tags"
        shell: bash
        run: |
          # Check output from: semantic-tag-production-action
          ERRORS="false"
          if [ "${{ steps.semantic-tag-production-patch.outputs.tag }}" != "2.9.7" ]; then
            echo "Errors with: semantic-tag-production [patch]"
            ERRORS="true"
          fi
          if [ "${{ steps.semantic-tag-production-minor.outputs.tag }}" != "0.2.0" ]; then
            echo "Errors with: semantic-tag-production [minor]"
            ERRORS="true"
          fi
          if [ "${{ steps.semantic-tag-production-major.outputs.tag }}" != "2.0.0" ]; then
            echo "Errors with: semantic-tag-production [major]"
            ERRORS="true"
          fi
          if [ "$ERRORS" = "true" ]; then
            echo "ERROR: check tag manipulation action/code"; exit 1
          else
            echo "All tag check tests passed, no errors found"
          fi

      - name: "Action: repository-tag-next-action [patch]"
        id: repo-tag-nxt-patch
        # yamllint disable-line rule:line-length
        uses: os-climate/osc-github-devops/.github/actions/repository-tag-next-action@main
        with:
          tag: "v0.0.4"
          type: "patch"

      - name: "Action: repository-tag-next-action [minor]"
        id: repo-tag-nxt-minor
        # yamllint disable-line rule:line-length
        uses: os-climate/osc-github-devops/.github/actions/repository-tag-next-action@main
        with:
          tag: "v1.8.3"
          type: "minor"

      - name: "Action: repository-tag-next-action [major]"
        id: repo-tag-nxt-major
        # yamllint disable-line rule:line-length
        uses: os-climate/osc-github-devops/.github/actions/repository-tag-next-action@main
        with:
          tag: "v4.1.1"
          type: "major"

      - name: "Validate Incremented DEV Tags"
        shell: bash
        run: |
          # Check output from: repo-tag-nxt
          ERRORS='false'
          EXPECTED='v0.0.5-dev1'
          if [ "${{ steps.repo-tag-nxt-patch.outputs.tag }}" != "$EXPECTED" ]; then
            echo "Errors with: repo-tag-nxt [patch]"
            echo "Received: ${{ steps.repo-tag-nxt-patch.outputs.tag }}"
            echo "Expected: $EXPECTED"
            ERRORS='true'
          fi
          EXPECTED='v1.9.0-dev1'
          if [ "${{ steps.repo-tag-nxt-minor.outputs.tag }}" != "$EXPECTED" ]; then
            echo "Errors with: repo-tag-nxt [minor]"
            echo "Received: ${{ steps.repo-tag-nxt-patch.outputs.tag }}"
            echo "Expected: $EXPECTED"
            ERRORS='true'
          fi
          EXPECTED='v5.0.0-dev1'
          if [ "${{ steps.repo-tag-nxt-major.outputs.tag }}" != "$EXPECTED" ]; then
            echo "Errors with: repo-tag-nxt [major]"
            echo "Received: ${{ steps.repo-tag-nxt-patch.outputs.tag }}"
            echo "Expected: $EXPECTED"
            ERRORS='true'
          fi
          if [ "$ERRORS" = 'true' ]; then
            echo "ERROR: check tag manipulation action/code"; exit 1
          else
            echo 'All tag check tests passed, no errors found'
          fi

      - name: "Action: url-validity-check-action"
        id: url-validity-check-action
        # yamllint disable-line rule:line-length
        uses: lfit/releng-reusable-workflows/.github/actions/url-validity-check-action@11530dee75e77f063c6e01ac7f3a6cb0cdc95db7 # 2025-02-05
        with:
          url: "https://linuxfoundation.org"

      - name: "Action: github-labels-action"
        id: github-labels-action
        # yamllint disable-line rule:line-length
        uses: os-climate/osc-github-devops/.github/actions/github-labels-action@main
        env:
          GH_TOKEN: ${{ github.token }}

      - name: "Validate: github-labels-action"
        shell: bash
        run: |
          # Check output from: github-labels-action
          if [ "${{ steps.github-labels-action.outputs.present }}" = 'true' ]; then
            echo "Labels are reported present:"
            if (gh label list | grep release); then
              exit 0
            fi
          elif [ "${{ steps.github-labels-action.outputs.created }}" = 'true' ]; then
            echo "Labels are reported present:"
            if (gh label list | grep release); then
              exit 0
            fi
          else
            echo 'The expected action outputs/labels were NOT found'
            gh label list
            exit 1
          fi

      - name: "Action: test-github-secrets-action"
        uses: os-climate/osc-github-devops/.github/actions/test-github-secrets-action@main
        # Do NOT run until change is merged; secrets will NOT be available and workflow WILL fail
        if: github.event_name != 'pull_request'
        # continue-on-error: true
        with:
          # Mandatory secrets/variables to check
          pypi_development: ${{ secrets.PYPI_DEVELOPMENT }}
          pypi_production: ${{ secrets.PYPI_PRODUCTION }}
          one_password_development: ${{ secrets.ONE_PASSWORD_DEVELOPMENT }}

      - name: "Action: string-comparison-action [match]"
        id: string-comparison-matching
        # yamllint disable-line rule:line-length
        uses: os-climate/osc-github-devops/.github/actions/string-comparison-action@main
        with:
          string_a: "Mary had a little lamb"
          string_b: "Mary had a little lamb"

      - name: "Action: string-comparison-action [different]"
        id: string-comparison-different
        # yamllint disable-line rule:line-length
        uses: os-climate/osc-github-devops/.github/actions/string-comparison-action@main
        with:
          string_a: "Mary had a little lamb"
          string_b: "I do not like eating lamb"

      - name: "Action: string-comparison-action [sub-string match]"
        id: string-comparison-substring
        # yamllint disable-line rule:line-length
        uses: os-climate/osc-github-devops/.github/actions/string-comparison-action@main
        with:
          string_a: "Mary had a little lamb"
          string_b: "a little lamb"
          substring_match: "true"

      - name: "Action: string-comparison-action [sub-string match, case-insensitive]"
        id: string-comparison-substring-nocase
        # yamllint disable-line rule:line-length
        uses: os-climate/osc-github-devops/.github/actions/string-comparison-action@main
        with:
          string_a: "Mary had a little lamb"
          string_b: "A little lamb"
          substring_match: "true"
          case_insensitive: "true"

      - name: "Report Errors: string-comparison-action"
        # yamllint disable-line rule:line-length
        if: steps.string-comparison-matching.outputs.match == 'false'
          || steps.string-comparison-different.outputs.match == 'true'
          || steps.string-comparison-substring.outputs.match == 'false'
          || steps.string-comparison-substring-nocase.outputs.match == 'false'
        shell: bash
        run: |
          # Check string-comparison action logic
          echo 'String comparison/action logic appears to be broken'
          exit 1

      # Action: path-check
      - name: "Action: path test [valid file]"
        id: path-check-file
        # yamllint disable-line rule:line-length
        uses: lfit/releng-reusable-workflows/.github/actions/path-check-action@11530dee75e77f063c6e01ac7f3a6cb0cdc95db7 # 2025-02-05
        with:
          path: "tests/resources/test-folder/test-file"

      - name: "Action: path test [valid folder]"
        id: path-check-folder
        # yamllint disable-line rule:line-length
        uses: lfit/releng-reusable-workflows/.github/actions/path-check-action@11530dee75e77f063c6e01ac7f3a6cb0cdc95db7 # 2025-02-05
        with:
          path: "tests/resources/test-folder"

      - name: "Action: path test [valid symlink to file]"
        id: path-check-symlink-file
        # yamllint disable-line rule:line-length
        uses: lfit/releng-reusable-workflows/.github/actions/path-check-action@11530dee75e77f063c6e01ac7f3a6cb0cdc95db7 # 2025-02-05
        with:
          path: "tests/resources/test-valid-file-symlink"

      - name: "Action: path test [valid symlink to folder]"
        id: path-check-symlink-folder
        # yamllint disable-line rule:line-length
        uses: lfit/releng-reusable-workflows/.github/actions/path-check-action@11530dee75e77f063c6e01ac7f3a6cb0cdc95db7 # 2025-02-05
        with:
          path: "tests/resources/test-valid-folder-symlink"

      # Tests: path-check
      - name: "Error with path tests (files/directories/symlinks)"
        id: path-check-errors
        shell: bash
        if: steps.path-check-file.outputs.type != 'file' ||
          steps.path-check-file.outputs.symlink != 'false' ||
          steps.path-check-folder.outputs.type != 'directory' ||
          steps.path-check-folder.outputs.symlink != 'false' ||
          steps.path-check-symlink-file.outputs.type != 'file' ||
          steps.path-check-symlink-file.outputs.symlink != 'true' ||
          steps.path-check-symlink-folder.outputs.type != 'directory' ||
          steps.path-check-symlink-folder.outputs.symlink != 'true'
        run: |
          # Report errors with path tests
          echo "One or more path checks failed validation"; exit 1

      - name: "Action: python-project-version-update-action"
        id: python-project-version-update-action
        uses: os-climate/osc-github-devops/.github/actions/python-project-version-update-action@main
        with:
          replacement_version: "v1.0.0"

      - name: "Validate: python-project-version-update-action"
        shell: bash
        run: |
          # Check version string was patched correctly
          if [ -f pyproject.toml ]; then
            if (grep "v1.0.0" pyproject.toml); then
              echo "Version substitution successful ✅"
            else
              echo "Version substitution failed ❌"
            fi
          fi

      - name: "Action: python-project-setup-action"
        uses: os-climate/osc-github-devops/.github/actions/python-project-setup-action@main
