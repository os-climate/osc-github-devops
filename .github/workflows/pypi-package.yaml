---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2024 The Linux Foundation

name: "📦 [R] PyPI Release"
# Publishes a Python package to PyPI"

on:
  workflow_call:
    inputs:
      PUBLISH_URL:
        description: "URL/prefix for package repository"
        type: string
        required: true
      ENVIRONMENT:
        # Environment MUST match the trusted publishing setup in PyPI, if defined
        description: "Mandatory environment, e.g. development, production"
        type: string
        required: false
        default: "production"
      BUILD_TAG:
        description: "Semantic tag for this release/build"
        type: string
        required: true
      ARTEFACT_LOCATION:
        description: "Path/location for build artefacts"
        type: string
        required: false
        default: "dist"
      ONE_PASSWORD_ITEM:
        description: "Path to 1Password vault credential for PyPI"
        type: string
        required: false
    secrets:
      OP_SERVICE_ACCOUNT_TOKEN:
        description: "1Password service account credential to access vault"
        required: false
      PYPI_CREDENTIAL:
        description: "PyPI API credential from GitHub secrets"
        required: false

permissions: {}

jobs:
  pypi-publish:
    name: "PyPI Packages"
    runs-on: "ubuntu-latest"
    environment:
      name: ${{ inputs.environment }}
    permissions:
      # Needed for trusted publishing; must also be passed from parent workflows
      id-token: write
    steps:
      # Need repository content to extract project name
      - uses: actions/checkout@v4

      - name: "Set workflow parameters and variables"
        id: parameters
        shell: bash
        run: |
          # Set workflow parameters and variables
          echo "PyPI Package Publishing"

          if [ -z "$OP_SERVICE_ACCOUNT_TOKEN" ] || [ -z "$ONE_PASSWORD_ITEM" ]; then
            echo "Unable to use 1Password to retrieve publishing key ❌"
            echo "Both variables must be set:"
            echo "OP_SERVICE_ACCOUNT_TOKEN and ONE_PASSWORD_ITEM"
            echo "method=secret" >> "$GITHUB_ENV"
          else
            echo "Authentication will use 1Password vault ✅"
            echo "method=1password" >> "$GITHUB_ENV"
          fi

          if [ ${{ env.method }} = "secret" ] && [ -z "$PYPI_CREDENTIAL" ]; then
            echo "Static API key NOT set OR available: PYPI_CREDENTIAL"
            echo "Publishing cannot continue without a valid method ❌"; exit 1
          else
            echo "Authentication will use GitHub secret ✅"
          fi
          echo "Sending to URL: ${{ inputs.PUBLISH_URL}}"
          echo "Environment is: ${{ inputs.ENVIRONMENT }}"

      - name: "Extract project/repository naming"
        id: naming
        # yamllint disable-line rule:line-length
        uses: os-climate/osc-github-devops/.github/actions/python-project-name@main

      - name: "⬇ Download build artefacts"
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.python_project_name }}
          path: ${{ inputs.artefact_location }}

      - name: "Manicure artefacts directory"
        id: files
        run: |
          # Remove file types unsupported by the Python Package Index
          if [ ! -d  ${{ inputs.artefact_location }} ]; then
            echo "Early exit; build artefacts path NOT found:  ${{ inputs.artefact_location }}"
            exit 0
          fi
          if [ -f  ${{ inputs.artefact_location }}/buildvars.txt ]; then
            rm ${{ inputs.artefact_location }}/buildvars.txt
          else
            echo "No buildvars.txt file to purge"
          fi
          # Remove outputs related to SigStore signing
          if test -n "$(find ${{ inputs.artefact_location }} -maxdepth 1 -name '*.sigstore*' -print -quit)"
          then
            echo "Found SigStore signing artefacts to purge"
            rm  ${{ inputs.artefact_location }}/*.sigstore*
          else
            echo "No SigStore signing artefacts to purge"
          fi

      - name: "Checking PyPI [for PROJECT]"
        id: project-url-check
        # yamllint disable-line rule:line-length
        uses: os-climate/osc-github-devops/.github/actions/url-validity-check@main
        with:
          # e.g. "https://test.pypi.org/project/ITR/"
          prefix: "${{ inputs.PUBLISH_URL }}/project"
          string: "/${{ steps.naming.outputs.python_project_name }}"
          suffix: "/"

      - name: "Checking PyPI [for BUILD]"
        id: build-url-check
        # yamllint disable-line rule:line-length
        uses: os-climate/osc-github-devops/.github/actions/url-validity-check@main
        with:
          prefix: "${{ inputs.PUBLISH_URL }}/project"
          # e.g. "https://test.pypi.org/project/ITR/v1.0.0/"
          string: "/${{ steps.naming.outputs.python_project_name }}"
          suffix: "/${{ inputs.build_tag }}/"

      - name: "Conditional publishing check"
        id: check-environment
        shell: bash
        run: |
          # Conditional publishing checks
          if [ "${{ inputs.PUBLISH_URL }}" = "https://pypi.org" ] && \
            [ "${{ steps.build-url-check.outputs.valid }}" == 'true' ]; then
            echo "This production build/release has already been published"
            echo "An attempt to release more than once should always fail"
            echo "### $PUBLISH_URL" >> "$GITHUB_STEP_SUMMARY"
            echo "# This production build/release already published ❌" >> "$GITHUB_STEP_SUMMARY"
            exit 1
          elif [ "${{ steps.build-url-check.outputs.valid }}" == 'true' ]; then
            # NOT considered an error unless pushing to the production repository
            echo "This test/development build/release has already been published"
            echo "PUBLISH=false" >> "$GITHUB_ENV"
            exit 0
          fi
          echo "Project present in PyPI: ${{ steps.project-url-check.outputs.valid }}"
          echo "Build present in PyPI: ${{ steps.build-url-check.outputs.valid }}"
          echo "Checks passed: this build has not yet been published/released ✅"

      # Temporarily disabled due to OIDC (and token/claim complications)
      # This is all about job_workflow_ref vs ref
      # e.g. https://github.com/pypi/warehouse/issues/11096
      # https://docs.github.com/en/actions/security-for-github-actions/security-hardening-your-deployments/using-openid-connect-with-reusable-workflows

      # Primary/default method uses trusted publishing
      # - name: "Publish PyPI [Trusted Publishing]"
      #   uses: pypa/gh-action-pypi-publish@15c56dba361d8335944d31a2ecd17d700fc7bcbc # v1.12.2
      #   # yamllint disable-line rule:line-length
      #   if: steps.project-url-check.outputs.valid == 'true' && steps.build-url-check.outputs.valid == 'false'
      #   with:
      #     repository-url: "${{ inputs.PUBLISH_URL }}/legacy/"
      #     # Show checksum values
      #     print-hash: true
      #     packages-dir: ${{ env.ARTEFACT_LOCATION }}
      #     # We already validated earlier in the pipeline (using twine)
      #     verify-metadata: false
      #     # Optional debugging, pretty much essential for information on failures
      #     verbose: true
      #     attestations: false # Currently too buggy to enable
      #     # attestations: true

      # Only used with the publishing method below
      - name: "Retrieve credential [ 1Password ]"
        id: one-password-pypi-test
        if: env.method == '1password'
        uses: 1password/load-secrets-action@581a835fb51b8e7ec56b71cf2ffddd7e68bb25e0 # v2.0.0
        with:
          # Export loaded secrets as environment variables
          export-env: true
        env:
          PYPI_CREDENTIAL: "${{ inputs.ONE_PASSWORD_ITEM}}"
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

      # Used only once prior to trusted publishing
      # After that, the project can be configured
      # Note: this is a manual operation in the PyPI web portal
      - name: "Publish PyPI [Credential from 1Password]"
        uses: pypa/gh-action-pypi-publish@15c56dba361d8335944d31a2ecd17d700fc7bcbc # v1.12.2
        if: env.use_one_password == 'true'
        # Needs re-instating once trusted publishinbg is enabled again
        # if: steps.project-url-check.outputs.valid == 'false' && env.use_one_password == 'true'
        with:
          repository-url: "${{ inputs.PUBLISH_URL }}/legacy/"
          print-hash: true
          packages-dir: ${{ env.ARTEFACT_LOCATION }}
          verify-metadata: false
          verbose: true
          # Credential retrieved from 1Password using service account
          password: "${{ env.PYPI_CREDENTIAL}}"
          attestations: false

      # Fallback method using credentials stored as GitHub secret
      # Only used initially when trusted publishing is unavailable (see above)
      - name: "Publish PyPI [Fallback: Credential from GitHub]"
        uses: pypa/gh-action-pypi-publish@15c56dba361d8335944d31a2ecd17d700fc7bcbc # v1.12.2
        if: env.use_one_password == 'false'
        # Needs re-instating once trusted publishing is enabled again
        # if: steps.project-url-check.outputs.valid == 'false' && env.use_one_password == 'true'
        with:
          repository-url: https://test.pypi.org/legacy/
          print-hash: true
          packages-dir: ${{ env.ARTEFACT_LOCATION }}
          verify-metadata: false
          verbose: true
          # Publishing API key stored as secret/variable in GitHub
          password: ${{ secrets.PYPI_CREDENTIAL }}
          attestations: false

      - name: "Print summary/job output"
        shell: bash
        run: |
          # Print summary/job output
          if [ ${{ inputs.PUBLISH_URL }} != "https://pypi.org" ] && [ "$PUBLISH" = "false" ]; then
            echo "## Publishing skipped due to existing content ⛔️" >> "$GITHUB_STEP_SUMMARY"
            echo "${{ inputs.PUBLISH_URL }}/project/\
            ${{ steps.naming.outputs.python_project_name }}/${{ inputs.build_tag }}/" \
            >> "$GITHUB_STEP_SUMMARY"
          elif [ ${{ inputs.PUBLISH_URL }} != "https://pypi.org" ]; then
            echo "## Publishing successful: ${{ inputs.PUBLISH_URL }} ✅" >> "$GITHUB_STEP_SUMMARY"
            echo "${{ inputs.PUBLISH_URL }}/project/\
            ${{ steps.naming.outputs.python_project_name }}/${{ inputs.build_tag }}/" \
            >> "$GITHUB_STEP_SUMMARY"
          else
            echo "# 🚀 Published packages to PyPI" >> "$GITHUB_STEP_SUMMARY"
            echo "${{ inputs.PUBLISH_URL }}/project/\
            ${{ steps.naming.outputs.python_project_name }}/${{ inputs.build_tag }}/" \
            >> "$GITHUB_STEP_SUMMARY"
          fi
