---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2024 The Linux Foundation

# reuse-sonarqube-cloud.yaml
name: "[R] sonarqube-cloud"
# "Runs a SonarQube Cloud scan"
# Scan results are uploaded to: https://sonarcloud.io/login

# yamllint disable-line rule:truthy
on:
  workflow_call:
    inputs:
      # Optional
      BUILD_WRAPPER_URL:
        # yamllint disable-line rule:line-length
        # e.g. https://raw.githubusercontent.com/o-ran-sc/ci-management/refs/heads/master/jjb/com-golog/prescan-golog-go-ubuntu.sh
        description: "Download location of build wrapper/script"
        type: string
        required: false
      BUILD_WRAPPER_OUT_DIR:
        description: "Filesystem location of build outputs"
        type: string
        required: false
      SONAR_HOST_URL:
        description: "Uploads scans to the given host URL"
        type: string
        required: false
        default: "https://sonarcloud.io"
      LC_ALL:
        # yamllint disable-line rule:line-length
        description: "Change when code character set is outside the range of en_US.UTF-8"
        type: string
        required: false
        default: "en_US.UTF-8"
    # Re-usable workflow requires secrets be explicitly passed
    secrets:
      SONAR_TOKEN:
        description: "SonarQube API key/token"
        required: true
      SONAR_ROOT_CERT:
        description: "Server root certificate PEM encoded"
        required: false

jobs:
  sonarqube-cloud:
    name: "SonarQube Cloud"
    runs-on: ubuntu-24.04
    # Environment variables are NOT available to reusable workflows
    # Below is necessary for conventional workflows and is provided here FYI
    # env:
    #   BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory # Directory where build-wrapper output will be placed
    steps:
      # yamllint disable-line rule:line-length
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          # Disabling shallow clones is recommended for improving the relevancy of reporting
          fetch-depth: 0

      - name: "Check build wrapper URL"
        id: url-validity-check-action
        if: inputs.BUILD_WRAPPER_URL != ''
        # yamllint disable-line rule:line-length
        uses: os-climate/osc-github-devops/.github/actions/url-validity-check-action@main
        with:
          url: ${{ inputs.build_wrapper_url }}

      - name: Install build wrapper
        if: inputs.BUILD_WRAPPER_URL != ''
        # yamllint disable-line rule:line-length
        uses: SonarSource/sonarqube-scan-action/install-build-wrapper@bfd4e558cda28cda6b5defafb9232d191be8c203 # v4.2.1

      - name: Run Build Wrapper
        if: inputs.BUILD_WRAPPER_URL != ''
        # yamllint disable-line rule:line-length
        run: |
          # Run Build Wrapper üõ†Ô∏è
          WGET_CMD=$(which wget)
          if [ ! -x "$WGET_CMD" ]; then
            echo "WGET command was not available ‚ùå"; exit 1
          fi
          "$WGET_CMD" -q "$BUILD_WRAPPER_URL"
          BUILD_SCRIPT=$(basename ${{ inputs.BUILD_WRAPPER_URL }})
          chmod u+x "$BUILD_SCRIPT"
          if [ -n "${{ inputs.BUILD_WRAPPER_OUT_DIR }}" ]; then
            BUILD_WRAPPER_OUT_DIR="${{ inputs.BUILD_WRAPPER_OUT_DIR }}"
          elif [ -n "${{ env.BUILD_WRAPPER_OUT_DIR }}" ]; then
            BUILD_WRAPPER_OUT_DIR="${{ env.BUILD_WRAPPER_OUT_DIR }}"
          fi
          if [ -z "$BUILD_WRAPPER_OUT_DIR" ]; then
            build-wrapper-linux-x86-64 "$BUILD_SCRIPT"
          else
            build-wrapper-linux-x86-64 --out-dir "$BUILD_WRAPPER_OUT_DIR" "$BUILD_SCRIPT"
          fi

      - name: SonarQube Scan
        # yamllint disable-line rule:line-length
        uses: SonarSource/sonarqube-scan-action@bfd4e558cda28cda6b5defafb9232d191be8c203 # v4.2.1
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
          SONAR_ROOT_CERT: ${{ secrets.SONAR_ROOT_CERT }}
          LC_ALL: ${{ inputs.LC_ALL }}
